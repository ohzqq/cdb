{{define "BookSqlConst" -}}
// Code generated by go generate; DO NOT EDIT. // 
package db

func getBookJsonSql(label string) string {
	sql := map[string]string{
{{- range .}}
		"{{.Label}}": {{.Label}}JsonSql,
{{- end}}
	}
	return sql[label]
}

func getBookStringSql(label string) string {
	sql := map[string]string{
{{- range .}}
		"{{.Label}}": {{.Label}}StringSql,
{{- end}}
	}
	return sql[label]
}

func getBookSimpleSql(label string) string {
	sql := map[string]string{
{{- range .}}
		"{{.Label}}": {{.Label}}SimpleSql,
{{- end}}
	}
	return sql[label]
}

const customColumnsSql = `
SELECT 
	IFNULL(JSON_QUOTE(id) , "") id,  
	IFNULL(JSON_QUOTE(label) , "") label,
	IFNULL(JSON_QUOTE(name) , "") name,
	IFNULL(JSON_QUOTE(editable) , "") editable,
	IFNULL(JSON_QUOTE(is_multiple) , "") is_multiple,
	IFNULL(JSON_QUOTE(JSON_EXTRACT(display, "$.is_names")), 0) is_names,
	IFNULL(JSON_QUOTE(JSON_EXTRACT(display, "$.description")), "") description
FROM custom_columns; `

const customColumnsFieldMetaSql = `
SELECT
JSON_GROUP_OBJECT("#" || label,
(SELECT
JSON_OBJECT(
'category_sort', IFNULL(JSON_EXTRACT(val, "$." || "#" || label || ".category_sort"), ''),
'column', IFNULL(JSON_EXTRACT(val, "$." || "#" || label || ".column"), ''),
'is_category',
CASE JSON_EXTRACT(val, "$." || "#" || label || ".is_category")
WHEN true then JSON("true")
ELSE JSON("false")
END,
'is_custom', 
CASE JSON_EXTRACT(val, "$." || "#" || label || ".is_custom")
WHEN true then JSON("true")
ELSE JSON("false")
END,
'is_editable', 
CASE JSON_EXTRACT(val, "$." || "#" || label || ".is_editable")
WHEN true then JSON("true")
ELSE JSON("false")
END,
'is_multiple', 
CASE JSON_EXTRACT(val, "$." || "#" || label || ".is_multiple")
WHEN '{}' THEN JSON("false")
ELSE JSON("true")
END,
'is_names',
CASE JSON_EXTRACT(val, "$." || "#" || label || ".is_multiple.ui_to_list")
WHEN "&" THEN JSON("true")
ELSE JSON("false")
END,
'join_table', IFNULL(
(SELECT 
'books_' || JSON_EXTRACT(val, "$." || "#" || label || ".table") || '_link'
WHERE JSON_EXTRACT(val, "$." || "#" || label || ".table") IS NOT NULL
AND JSON_EXTRACT(val, "$." || "#" || label || ".is_category") = true
), ''),
'label', "#" || JSON_EXTRACT(val, "$." || "#" || label || ".label"),
'link_column', IFNULL(JSON_EXTRACT(val, "$." || "#" || label || ".link_column"), ''),
'name', IFNULL(lower(JSON_EXTRACT(val, "$." || "#" || label || ".name")), label),
'table', IFNULL(JSON_EXTRACT(val, "$." || "#" || label || ".table"), '')
)
FROM preferences 
WHERE key = 'field_metadata')) fieldMeta
FROM custom_columns
`

{{range .}}
	{{- if eq .Label "authors" "languages" "publisher" "rating" "series" "tags" -}}
{{template "ManyToManyJson" .}}
{{template "ManyToManyStr" . -}}
{{template "ManyToManySimple" . -}}
	{{- end -}}
	{{- if eq .Label "timestamp" "pubdate" "last_modified" -}}
const {{.Label}}JsonSql = `JSON_QUOTE(IFNULL(strftime('%Y-%m-%d', {{.Label}}), '')) {{.Label}}`
const {{.Label}}SimpleSql = `JSON_QUOTE(IFNULL(strftime('%Y-%m-%d', {{.Label}}), '')) {{.Label}}`
const {{.Label}}StringSql = `IFNULL(strftime('%Y-%m-%d', {{.Label}}), '') {{.Label}}`
	{{- end}}
	{{- if eq .Label "id" "series_index" -}}
const {{.Label}}JsonSql = `JSON_QUOTE(IFNULL(lower(books.{{.Label}}), '')) {{.Label}}`
const {{.Label}}SimpleSql = `JSON_QUOTE(IFNULL(lower(books.{{.Label}}), '')) {{.Label}}`
const {{.Label}}StringSql = `IFNULL(lower(books.{{.Label}}), '') {{.Label}}`
	{{- end}}
	{{- if eq .Label "author_sort" "path" "sort" "title" "uuid" -}}
const {{.Label}}JsonSql = `JSON_QUOTE(IFNULL({{.Label}}, '')) {{.Label}}`
const {{.Label}}SimpleSql = `JSON_QUOTE(IFNULL({{.Label}}, '')) {{.Label}}`
const {{.Label}}StringSql = `IFNULL({{.Label}}, '') {{.Label}}`
	{{- end}}
{{end}}


const coverJsonSql = `
CASE has_cover
WHEN true
THEN JSON_OBJECT(
	'basename', 'cover',
	'extension', '.jpg',
	'path', '/' || path || '/cover.jpg',
	'uri', '/books/' || books.id || '/cover.jpg',
	'value', 'cover.jpg'
END cover
`

const coverSimpleSql = `
CASE has_cover
WHEN true
THEN JSON_QUOTE(IFNULL('/' || path || '/cover.jpg', ''))
END cover
`

const coverStringSql = `
CASE has_cover
WHEN true
THEN IFNULL('/' || path || '/cover.jpg', '')
END cover
`

const commentsJsonSql = `
IFNULL((
SELECT JSON_QUOTE(text) 
FROM comments 
WHERE book=books.id), '""') comments
`

const commentsSimpleSql = `
(SELECT JSON_QUOTE(IFNULL(text, '')) 
FROM comments 
WHERE book=books.id) comments
`

const commentsStringSql = `
(SELECT IFNULL(text, '')
FROM comments 
WHERE book=books.id) comments
`

const identifiersJsonSql = `
IFNULL((
SELECT 
JSON_GROUP_ARRAY(JSON_OBJECT(
	'value', type || ":" || val,
	'id', lower(id)))
FROM identifiers
WHERE book=books.id), "[]") identifiers
`

const identifiersSimpleSql = `
(
SELECT 
JSON_QUOTE(IFNULL(GROUP_CONCAT(type || ':' || val, ', '), ''))
FROM identifiers
WHERE book=books.id) identifiers
`

const identifiersStringSql = `
(
SELECT 
IFNULL(GROUP_CONCAT(type || ':' || val, ', '), '')
FROM identifiers
WHERE book=books.id) identifiers
`

const formatsJsonSql = `
IFNULL(
JSON_INSERT((
SELECT 
JSON_GROUP_ARRAY(JSON_OBJECT(
	'rel', name,
	'ext', '.' || lower(format),
	'path', books.path || '/' || name || '.' || lower(format),
	'size', uncompressed_size,
	'href', 'books/' || books.id || '.' || lower(format),
	'value', name || '.' || lower(format),
	'id', id))
FROM data
WHERE book=books.id) 
,'$[#]',
CASE has_cover 
WHEN true 
THEN JSON_OBJECT(
	'rel', 'cover',
	'ext', '.jpg',
	'type', "image/jpeg",
	'path', path || '/cover.jpg',
	'href', 'books/' || books.id || '/cover.jpg',
	'value', 'cover.jpg')
ELSE '{}' 
END
), "[]") formats
`

const formatsSimpleSql = `
(SELECT
JSON_QUOTE(IFNULL(GROUP_CONCAT(format, ', '), ''))
FROM data
WHERE book=books.id) formats`

const formatsStringSql = `
(SELECT
IFNULL(GROUP_CONCAT(format, ', '), '')
FROM data
WHERE book=books.id) formats`

{{end}}
